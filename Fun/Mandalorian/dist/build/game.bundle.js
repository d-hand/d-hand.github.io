!function(t){var e={};function n(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(i,o,function(e){return t[e]}.bind(null,o));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=3)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PistolFactory=e.Pistol=void 0;var i=function(){function t(t){var e=this,n=t.pistol,i=t.objectFactory,o=t.mouse;this.lastFired=0,this.isFire=!1,this.isActive=!1,this.activate=function(t){e.isActive=t,e.pistol.setVisible(t)},this.fire=function(t){return e.isFire=t},this.pistol=n,this.objectFactory=i,this.mouse=o}return t.prototype.update=function(t,e){if(this.isActive&&this.isFire&&t>this.lastFired){var n=o.shotSprites[Math.floor(5*Math.random())],i=this.objectFactory.sprite(this.mouse.x,this.mouse.y,n);i.play(n),i.once(Phaser.Animations.Events.SPRITE_ANIMATION_COMPLETE,(function(){return i.destroy()})),this.lastFired=t+800}},t}();e.Pistol=i;var o=function(){function t(){}return t.load=function(e){e.load.image(t.pistol,t.pistol);for(var n=0,i=t.shotSprites;n<i.length;n++){var o=i[n];e.load.spritesheet(o,o,{frameWidth:32,frameHeight:32,endFrame:3})}},t.create=function(e,n){var o=e.input.mousePointer;t.shotSprites.map((function(t){return e.createAnimation({key:t,frames:e.anims.generateFrameNames(t),hideOnComplete:!0})}));var r=e.add.sprite(12,-10,t.pistol).setVisible(!1);return n.add(r),new i({objectFactory:e.add,pistol:r,mouse:o})},t.pistol="assets/pistol.png",t.shotSprites=["assets/pistol-shot.png","assets/pistol-shot-up.png","assets/pistol-shot-right.png","assets/pistol-shot-bottom.png","assets/pistol-shot-left.png"],t}();e.PistolFactory=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.RocketGunFactory=e.RocketGun=void 0;var i=n(2),o=function(){function t(t){var e=this,n=t.rocketGun,i=t.rocketGroup,o=t.mouse;this.lastFired=0,this.isFire=!1,this.isActive=!1,this.activate=function(t){e.isActive=t,e.rocketGun.setVisible(t)},this.fire=function(t){return e.isFire=t},this.rocketGun=n,this.rocketGroup=i,this.mouse=o}return t.prototype.update=function(t,e){if(this.isActive&&this.isFire&&t>this.lastFired){var n=this.rocketGroup.get();if(n){var i=this.getAbsolutePosition(),o=i[0],r=i[1];n.activate(o,r,this.mouse.x,this.mouse.y),this.lastFired=t+600}}},t.prototype.getAbsolutePosition=function(){this.rocketGun.getWorldTransformMatrix(t.tempMatrix);var e=t.tempMatrix.decomposeMatrix();return[e.translateX,e.translateY]},t.tempMatrix=new Phaser.GameObjects.Components.TransformMatrix,t}();e.RocketGun=o;var r=function(){function t(){}return t.load=function(e){e.load.image({key:t.image,url:t.image})},t.create=function(e,n){var r=e.input.mousePointer,a=e.add.group({classType:i.Rocket,maxSize:20,runChildUpdate:!0}),s=e.add.sprite(12,-7,t.image).setVisible(!1);return n.add(s),new o({rocketGun:s,rocketGroup:a,mouse:r})},t.image="assets/rocket-gun.png",t}();e.RocketGunFactory=r},function(t,e,n){"use strict";var i,o=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.RocketFactory=e.Rocket=void 0;var r=function(t){function e(e){var n=t.call(this,e,0,0,a.rocketImage)||this;return n.displayHeight=7,n.displayWidth=15,n.incX=0,n.incY=0,n.speed=Phaser.Math.GetSpeed(400,1),n}return o(e,t),e.prototype.activate=function(t,e,n,i){this.x1=t,this.y1=e,this.x2=n,this.y2=i,this.setActive(!0),this.setVisible(!0),this.setPosition(t,e);var o=Phaser.Math.Angle.Between(n,i,t,e);this.setRotation(o),this.incX=Math.cos(o),this.incY=Math.sin(o)},e.prototype.update=function(t,e){if(this.x-=this.incX*(this.speed*e),this.y-=this.incY*(this.speed*e),Math.abs(this.x2-this.x1)-Math.abs(this.x-this.x1)<0||Math.abs(this.y2-this.y1)-Math.abs(this.y-this.y1)<0){this.setActive(!1),this.setVisible(!1);var n=this.scene.add.sprite(this.x,this.y,a.explosionSprite);n.setScale(10),n.play(a.explosionSprite),n.once(Phaser.Animations.Events.SPRITE_ANIMATION_COMPLETE,(function(){return n.destroy()})),this.destroy(),console.log("destroy")}},e}(Phaser.GameObjects.Image);e.Rocket=r;var a=function(){function t(){}return t.load=function(e){e.load.image({key:t.rocketImage,url:t.rocketImage}),e.load.spritesheet(t.explosionSprite,t.explosionSprite,{frameWidth:64,frameHeight:64,endFrame:23})},t.addAnimationToScene=function(e){return e.anims.create({key:t.explosionSprite,frames:e.anims.generateFrameNames(t.explosionSprite),hideOnComplete:!0})},t.rocketImage="assets/rocket.png",t.explosionSprite="assets/rocket-explosion.png",t}();e.RocketFactory=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),n(4);var i=n(6),o={type:Phaser.WEBGL,width:800,height:600,backgroundColor:"#2d2d2d",scene:i.Scene};new Phaser.Game(o)},function(t,e,n){t.exports=n(5)(1)},function(t,e){t.exports=vendor},function(t,e,n){"use strict";var i,o=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.Scene=void 0;var r=n(7),a=n(2),s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.preload=function(){a.RocketFactory.load(this),r.MandalorianFactory.load(this)},e.prototype.create=function(){a.RocketFactory.addAnimationToScene(this),this.mandalorian=r.MandalorianFactory.create(this)},e.prototype.update=function(t,e){this.mandalorian.update(t,e)},e.prototype.createAnimation=function(t){var e=this.anims.create(t);if(!1===e)throw new Error("Не удалось созать анимацию "+t.key);return e},e}(Phaser.Scene);e.Scene=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MandalorianFactory=e.Mandalorian=void 0;var i=n(8),o=n(0),r=n(1),a=function(){function t(t){var e=t.mandalorian,n=t.weapons,i=t.keyboard,o=t.mouse;this.speed=Phaser.Math.GetSpeed(100,1),this.mandalorian=e,this.weapons=n,this.mouse=o,this.up=[i.addKey("up"),i.addKey("E")],this.left=[i.addKey("left"),i.addKey("S")],this.bottom=[i.addKey("down"),i.addKey("D")],this.right=[i.addKey("right"),i.addKey("F")]}return t.prototype.update=function(t,e){this.weapons.update(t,e),this.mandalorian.x+=e*this.speed*(Number(this.right.some((function(t){return t.isDown})))-Number(this.left.some((function(t){return t.isDown})))),this.mandalorian.y+=e*this.speed*(Number(this.bottom.some((function(t){return t.isDown})))-Number(this.up.some((function(t){return t.isDown})))),this.mandalorian.setRotation(Phaser.Math.Angle.Between(this.mouse.x,this.mouse.y,this.mandalorian.x,this.mandalorian.y)-Math.PI/2)},t}();e.Mandalorian=a;var s=function(){function t(){}return t.load=function(e){o.PistolFactory.load(e),r.RocketGunFactory.load(e),e.load.image(t.mandalorianSprite,"assets/mandalorian.png")},t.create=function(e){var n=e.input.keyboard,o=e.input.mousePointer,r=e.add.sprite(0,0,t.mandalorianSprite),s=e.add.container(400,400,[r]).setDepth(1),c=i.MandalorianWeaponFactory.create(e,s);return new a({mandalorian:s,weapons:c,keyboard:n,mouse:o})},t.mandalorianSprite="mandalorianSprite",t}();e.MandalorianFactory=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MandalorianWeaponFactory=e.MandalorianWeapons=void 0;var i=n(0),o=n(1),r=function(){function t(t){var e=this,n=t.pistol,i=t.rocketGun,o=t.input;this.activeIndex=0,this.getWeapon=function(){return e.weapons[e.activeIndex]},this.switchWeapons=function(){e.getWeapon().activate(!1),e.switchIndex(),e.getWeapon().activate(!0)},this.weapons=[n,i],o.keyboard.addKey("W").on(Phaser.Input.Keyboard.Events.DOWN,this.switchWeapons),o.keyboard.addKey("CTRL").on(Phaser.Input.Keyboard.Events.DOWN,this.switchWeapons),o.on(Phaser.Input.Events.POINTER_DOWN,(function(){return e.fire(!0)})),o.on(Phaser.Input.Events.POINTER_UP,(function(){return e.fire(!1)})),this.getWeapon().activate(!0)}return t.prototype.update=function(t,e){this.weapons.forEach((function(n){return n.update(t,e)}))},t.prototype.fire=function(t){this.getWeapon().fire(t)},t.prototype.switchIndex=function(){++this.activeIndex>=this.weapons.length&&(this.activeIndex=0)},t}();e.MandalorianWeapons=r;var a=function(){function t(){}return t.create=function(t,e){var n=t.input,a=i.PistolFactory.create(t,e),s=o.RocketGunFactory.create(t,e);return new r({pistol:a,rocketGun:s,input:n})},t}();e.MandalorianWeaponFactory=a}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,