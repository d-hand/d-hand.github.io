!function(t){var e={};function o(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,o),i.l=!0,i.exports}o.m=t,o.c=e,o.d=function(t,e,n){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)o.d(n,i,function(e){return t[e]}.bind(null,i));return n},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=3)}([function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PistolFactory=e.Pistol=void 0;var n=function(){function t(t){var e=t.pistol,o=t.objectFactory;this.lastFired=0,this.pistol=e,this.objectFactory=o}return t.prototype.setActivate=function(t){this.pistol.setVisible(t)},t.prototype.fire=function(t,e,o,n){if(t>this.lastFired){var r=i.shotSprites[Math.floor(5*Math.random())],a=this.objectFactory.sprite(o,n,r);a.play(r),a.once(Phaser.Animations.Events.SPRITE_ANIMATION_COMPLETE,(function(){return a.destroy()})),this.lastFired=t+800}},t}();e.Pistol=n;var i=function(){function t(){}return t.load=function(e){e.load.image(t.pistol,t.pistol);for(var o=0,n=t.shotSprites;o<n.length;o++){var i=n[o];e.load.spritesheet(i,i,{frameWidth:32,frameHeight:32,endFrame:3})}},t.create=function(e,o){t.shotSprites.map((function(t){return e.createAnimation({key:t,frames:e.anims.generateFrameNames(t),hideOnComplete:!0})}));var i=e.add.sprite(12,-10,t.pistol).setVisible(!1);return o.add(i),new n({objectFactory:e.add,pistol:i})},t.pistol="assets/pistol.png",t.shotSprites=["assets/pistol-shot.png","assets/pistol-shot-up.png","assets/pistol-shot-right.png","assets/pistol-shot-bottom.png","assets/pistol-shot-left.png"],t}();e.PistolFactory=i},function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.RocketGunFactory=e.RocketGun=void 0;var n=o(2),i=function(){function t(t){var e=t.rocketGun,o=t.rocketGroup;this.lastFired=0,this.rocketGun=e,this.rocketGroup=o}return t.prototype.setActivate=function(t){this.rocketGun.setVisible(t)},t.prototype.fire=function(t,e,o,n){if(t>this.lastFired){var i=this.rocketGroup.get();if(i){var r=this.getAbsolutePosition(),a=r[0],s=r[1];i.activate(a,s,o,n),this.lastFired=t+600}}},t.prototype.getAbsolutePosition=function(){this.rocketGun.getWorldTransformMatrix(t.tempMatrix);var e=t.tempMatrix.decomposeMatrix();return[e.translateX,e.translateY]},t.tempMatrix=new Phaser.GameObjects.Components.TransformMatrix,t}();e.RocketGun=i;var r=function(){function t(){}return t.load=function(e){e.load.image({key:t.image,url:t.image})},t.create=function(e,o){var r=e.add.group({classType:n.Rocket,maxSize:20,runChildUpdate:!0}),a=e.add.sprite(12,-7,t.image).setVisible(!1);return o.add(a),new i({rocketGun:a,rocketGroup:r})},t.image="assets/rocket-gun.png",t}();e.RocketGunFactory=r},function(t,e,o){"use strict";var n,i=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])})(t,e)},function(t,e){function o(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)});Object.defineProperty(e,"__esModule",{value:!0}),e.RocketFactory=e.Rocket=void 0;var r=function(t){function e(e){var o=t.call(this,e,0,0,a.rocketImage)||this;return o.displayHeight=7,o.displayWidth=15,o.incX=0,o.incY=0,o.speed=Phaser.Math.GetSpeed(400,1),o}return i(e,t),e.prototype.activate=function(t,e,o,n){this.x1=t,this.y1=e,this.x2=o,this.y2=n,this.setActive(!0),this.setVisible(!0),this.setPosition(t,e);var i=Phaser.Math.Angle.Between(o,n,t,e);this.setRotation(i),this.incX=Math.cos(i),this.incY=Math.sin(i)},e.prototype.update=function(t,e){if(this.x-=this.incX*(this.speed*e),this.y-=this.incY*(this.speed*e),Math.abs(this.x2-this.x1)-Math.abs(this.x-this.x1)<0||Math.abs(this.y2-this.y1)-Math.abs(this.y-this.y1)<0){this.setActive(!1),this.setVisible(!1);var o=this.scene.add.sprite(this.x,this.y,a.explosionSprite);o.setScale(10),o.play(a.explosionSprite),o.once(Phaser.Animations.Events.SPRITE_ANIMATION_COMPLETE,(function(){return o.destroy()})),this.destroy(),console.log("destroy")}},e}(Phaser.GameObjects.Image);e.Rocket=r;var a=function(){function t(){}return t.load=function(e){e.load.image({key:t.rocketImage,url:t.rocketImage}),e.load.spritesheet(t.explosionSprite,t.explosionSprite,{frameWidth:64,frameHeight:64,endFrame:23})},t.addAnimationToScene=function(e){return e.anims.create({key:t.explosionSprite,frames:e.anims.generateFrameNames(t.explosionSprite),hideOnComplete:!0})},t.rocketImage="assets/rocket.png",t.explosionSprite="assets/rocket-explosion.png",t}();e.RocketFactory=a},function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),o(4);var n=o(6),i={type:Phaser.WEBGL,width:800,height:600,backgroundColor:"#2d2d2d",scene:n.Scene};new Phaser.Game(i)},function(t,e,o){t.exports=o(5)(1)},function(t,e){t.exports=vendor},function(t,e,o){"use strict";var n,i=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])})(t,e)},function(t,e){function o(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)});Object.defineProperty(e,"__esModule",{value:!0}),e.Scene=void 0;var r=o(7),a=o(2),s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.preload=function(){a.RocketFactory.load(this),r.MandalorianFactory.load(this)},e.prototype.create=function(){a.RocketFactory.addAnimationToScene(this),this.mandalorian=r.MandalorianFactory.create(this)},e.prototype.update=function(t,e){this.mandalorian.update(t,e)},e.prototype.createAnimation=function(t){var e=this.anims.create(t);if(!1===e)throw new Error("Не удалось созать анимацию "+t.key);return e},e}(Phaser.Scene);e.Scene=s},function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MandalorianFactory=e.Mandalorian=void 0;var n=o(8),i=o(0),r=o(1),a=function(){function t(t){var e=t.mandalorian,o=t.weapons,n=t.keyboard,i=t.mouse;this.speed=Phaser.Math.GetSpeed(100,1),this.mandalorian=e,this.weapons=o,this.mouse=i,this.up=[n.addKey("up"),n.addKey("E")],this.left=[n.addKey("left"),n.addKey("S")],this.bottom=[n.addKey("down"),n.addKey("D")],this.right=[n.addKey("right"),n.addKey("F")]}return t.prototype.update=function(t,e){this.weapons.update(t,e),this.mandalorian.x+=e*this.speed*(Number(this.right.some((function(t){return t.isDown})))-Number(this.left.some((function(t){return t.isDown})))),this.mandalorian.y+=e*this.speed*(Number(this.bottom.some((function(t){return t.isDown})))-Number(this.up.some((function(t){return t.isDown})))),this.mandalorian.setRotation(Phaser.Math.Angle.Between(this.mouse.x,this.mouse.y,this.mandalorian.x,this.mandalorian.y)-Math.PI/2)},t}();e.Mandalorian=a;var s=function(){function t(){}return t.load=function(e){i.PistolFactory.load(e),r.RocketGunFactory.load(e),e.load.image(t.mandalorianSprite,"assets/mandalorian.png")},t.create=function(e){var o=e.input.keyboard,i=e.input.mousePointer,r=e.add.sprite(0,0,t.mandalorianSprite),s=e.add.container(400,400,[r]).setDepth(1),c=n.MandalorianWeaponFactory.create(e,s);return new a({mandalorian:s,weapons:c,keyboard:o,mouse:i})},t.mandalorianSprite="mandalorianSprite",t}();e.MandalorianFactory=s},function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MandalorianWeaponFactory=e.MandalorianWeapons=void 0;var n=o(0),i=o(1),r=function(){function t(t){var e=this,o=t.pistol,n=t.rocketGun,i=t.input,r=t.mouse;this.activeIndex=0,this.getWeapon=function(){return e.weapons[e.activeIndex]},this.switchWeapons=function(){e.getWeapon().setActivate(!1),e.switchIndex(),e.getWeapon().setActivate(!0)},this.weapons=[o,n],this.mouse=r,i.keyboard.addKey("W").on(Phaser.Input.Keyboard.Events.DOWN,this.switchWeapons),i.keyboard.addKey("CTRL").on(Phaser.Input.Keyboard.Events.DOWN,this.switchWeapons),this.getWeapon().setActivate(!0)}return t.prototype.update=function(t,e){this.mouse.isDown&&this.getWeapon().fire(t,e,this.mouse.x,this.mouse.y)},t.prototype.switchIndex=function(){++this.activeIndex>=this.weapons.length&&(this.activeIndex=0)},t}();e.MandalorianWeapons=r;var a=function(){function t(){}return t.create=function(t,e){var o=t.input,a=t.input.mousePointer,s=n.PistolFactory.create(t,e),c=i.RocketGunFactory.create(t,e);return new r({pistol:s,rocketGun:c,input:o,mouse:a})},t}();e.MandalorianWeaponFactory=a}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,